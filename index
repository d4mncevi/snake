<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Classic Snake — Playable in Browser</title>
  <style>
    :root{ --bg:#0b1220; --panel:#0f1724; --accent:#22c55e; --muted:#94a3b8; }
    *{box-sizing:border-box}
    body{background:linear-gradient(180deg,#071026, #06101b); color:#e6eef8; font-family:Inter, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial; margin:0; padding:24px; display:flex; gap:24px; align-items:flex-start; justify-content:center; min-height:100vh}
    .container{display:flex; gap:20px; align-items:flex-start}
    .game{background:var(--panel); padding:18px; border-radius:12px; box-shadow:0 8px 30px rgba(2,6,23,0.6)}
    canvas{background:linear-gradient(180deg,#071826,#082233); display:block; border-radius:8px}
    .hud{display:flex; gap:12px; margin-top:12px; align-items:center}
    .stat{background:rgba(255,255,255,0.03); padding:8px 12px; border-radius:8px; font-weight:600}
    .controls{width:260px; background:rgba(255,255,255,0.02); padding:14px; border-radius:12px}
    h1{font-size:18px;margin:0 0 8px 0}
    p{margin:6px 0;color:var(--muted)}
    button{background:var(--accent); color:#062018; border:none; padding:8px 12px; border-radius:8px; font-weight:700; cursor:pointer}
    .btn-ghost{background:transparent;border:1px solid rgba(255,255,255,0.06); color:var(--muted); padding:6px 10px}
    .small{font-size:13px}
    .touch-ctrls{display:flex; gap:8px; margin-top:14px; justify-content:center}
    .dir-btn{width:58px;height:58px;border-radius:10px;background:rgba(255,255,255,0.02);display:flex;align-items:center;justify-content:center;font-weight:800}
    .footer{margin-top:12px;font-size:13px;color:var(--muted)}
    .toggle{display:flex;gap:8px;align-items:center}
    label.switch{position:relative;display:inline-block;width:46px;height:26px}
    label.switch input{opacity:0;width:0;height:0}
    .slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background:#ccc;transition:.3s;border-radius:26px}
    .slider:before{position:absolute;content:"";height:20px;width:20px;left:3px;bottom:3px;background:white;transition:.3s;border-radius:50%}
    label.switch input:checked + .slider{background:var(--accent)}
    label.switch input:checked + .slider:before{transform:translateX(20px)}
  </style>
</head>
<body>
  <div class="container">
    <div class="game">
      <canvas id="board" width="480" height="480"></canvas>
      <div class="hud">
        <div class="stat">Score: <span id="score">0</span></div>
        <div class="stat">Length: <span id="length">1</span></div>
        <div class="stat">Speed: <span id="speed">5</span></div>
        <div style="margin-left:auto;display:flex;gap:8px">
          <button id="start">Start</button>
          <button id="pause" class="btn-ghost">Pause</button>
          <button id="restart" class="btn-ghost">Restart</button>
        </div>
      </div>
    </div>

    <div class="controls">
      <h1>Classic Snake — Settings</h1>
      <p>Play a faithful Snake inspired by old phones. Eat food to grow; avoid walls and yourself.</p>

      <div style="display:flex;gap:8px;margin-top:8px">
        <label class="small">Board Size:</label>
        <select id="size" class="small">
          <option value="16">16 × 16</option>
          <option value="24" selected>24 × 24</option>
          <option value="32">32 × 32</option>
        </select>
      </div>

      <div style="margin-top:10px;display:flex;gap:8px;align-items:center">
        <label class="small">Mode:</label>
        <div class="toggle">
          <label class="small">Walls</label>
          <label class="switch"><input type="checkbox" id="wrap" checked><span class="slider"></span></label>
          <label class="small">Wrap</label>
        </div>
      </div>

      <div style="margin-top:10px;display:flex;gap:8px;align-items:center">
        <label class="small">Initial Speed:</label>
        <input type="range" id="initSpeed" min="3" max="12" value="5">
        <span id="initSpeedVal" class="small">5</span>
      </div>

      <div style="margin-top:10px;display:flex;gap:8px;align-items:center">
        <label class="small">Grow per food:</label>
        <input type="number" id="grow" min="1" max="5" value="1" style="width:64px">
      </div>

      <div style="margin-top:12px;display:flex;gap:8px">
        <button id="apply" class="small">Apply</button>
        <button id="randomize" class="btn-ghost small">Randomize Food</button>
      </div>

      <div class="footer">
        <div>Status: <span id="status">Ready</span></div>
      </div>
    </div>
  </div>

  <script>
    const canvas = document.getElementById('board');
    const ctx = canvas.getContext('2d');
    const scoreEl = document.getElementById('score');
    const lengthEl = document.getElementById('length');
    const speedEl = document.getElementById('speed');
    const statusEl = document.getElementById('status');

    const sizeSel = document.getElementById('size');
    const wrapToggle = document.getElementById('wrap');
    const initSpeedRange = document.getElementById('initSpeed');
    const initSpeedVal = document.getElementById('initSpeedVal');
    const growInput = document.getElementById('grow');

    const startBtn = document.getElementById('start');
    const pauseBtn = document.getElementById('pause');
    const restartBtn = document.getElementById('restart');
    const applyBtn = document.getElementById('apply');
    const randomBtn = document.getElementById('randomize');

    let grid=24, cellSize=canvas.width/grid, snake=[{x:12,y:12}], dir={x:0,y:0}, pendingDir=null;
    let food={x:5,y:5}, score=0, speed=5, growAmount=1, wrap=true, running=false, gameInterval=null;

    // sound effects
    const eatSound = new Audio('https://cdn.pixabay.com/download/audio/2022/03/15/audio_7d15b3f8a3.mp3?filename=pop-94319.mp3');
    const moveSound = new Audio('https://cdn.pixabay.com/download/audio/2022/03/15/audio_26a1a07cf3.mp3?filename=click-124467.mp3');

    function resetGame(){
      grid = parseInt(sizeSel.value,10);
      cellSize = canvas.width / grid;
      snake=[{x:Math.floor(grid/2),y:Math.floor(grid/2)}];
      dir={x:0,y:0}; pendingDir=null;
      food={x:Math.floor(Math.random()*grid),y:Math.floor(Math.random()*grid)};
      score=0;
      speed=parseInt(initSpeedRange.value,10);
      growAmount=parseInt(growInput.value,10)||1;
      wrap=wrapToggle.checked;
      updateHUD();
      draw();
      statusEl.textContent='Ready';
    }

    function drawCell(x,y,color){
      ctx.fillStyle=color;
      ctx.fillRect(x*cellSize,y*cellSize,cellSize-1,cellSize-1);
    }

    function draw(){
      ctx.fillStyle='#071826'; ctx.fillRect(0,0,canvas.width,canvas.height);
      drawCell(food.x,food.y,'#ff5c5c');
      for(let i=0;i<snake.length;i++) drawCell(snake[i].x,snake[i].y,i==0?'#22c55e':'#55d687');
    }

    function step(){
      if(pendingDir && !(pendingDir.x===-dir.x&&pendingDir.y===-dir.y)) dir=pendingDir;
      if(dir.x===0&&dir.y===0) return;
      let head={x:snake[0].x+dir.x,y:snake[0].y+dir.y};
      if(wrap){head.x=(head.x+grid)%grid;head.y=(head.y+grid)%grid;}else if(head.x<0||head.x>=grid||head.y<0||head.y>=grid){gameOver();return;}
      if(snake.some((s,i)=>i>0&&s.x===head.x&&s.y===head.y)){gameOver();return;}
      snake.unshift(head);
      moveSound.currentTime=0; moveSound.play();
      if(head.x===food.x&&head.y===food.y){
        score+=10;
        eatSound.currentTime=0; eatSound.play();
        for(let i=0;i<growAmount;i++) snake.push({...snake[snake.length-1]});
        food={x:Math.floor(Math.random()*grid),y:Math.floor(Math.random()*grid)};
        speed=Math.min(20,speed+0.3);
      } else snake.pop();
      updateHUD();
      draw();
    }

    function updateHUD(){
      scoreEl.textContent=score; lengthEl.textContent=snake.length; speedEl.textContent=speed.toFixed(1);
    }

    function gameLoop(){
      clearInterval(gameInterval);
      gameInterval=setInterval(step,1000/speed);
    }

    function startGame(){
      if(!running){running=true;statusEl.textContent='Running';if(dir.x===0&&dir.y===0)dir={x:1,y:0};gameLoop();}}
    function pauseGame(){running=false;statusEl.textContent='Paused';clearInterval(gameInterval);} 
    function gameOver(){pauseGame();statusEl.textContent='Game Over — Score '+score;}

    window.addEventListener('keydown',e=>{
      const k=e.key.toLowerCase();
      if(['arrowup','w','8'].includes(k))pendingDir={x:0,y:-1};
      else if(['arrowdown','s','2'].includes(k))pendingDir={x:0,y:1};
      else if(['arrowleft','a','4'].includes(k))pendingDir={x:-1,y:0};
      else if(['arrowright','d','6'].includes(k))pendingDir={x:1,y:0};
      else if(k===' ') running?pauseGame():startGame();
    });

    startBtn.onclick=startGame;
    pauseBtn.onclick=()=>running?pauseGame():startGame();
    restartBtn.onclick=()=>{pauseGame();resetGame();};
    applyBtn.onclick=()=>resetGame();
    randomBtn.onclick=()=>{food={x:Math.floor(Math.random()*grid),y:Math.floor(Math.random()*grid)};draw();};

    resetGame();
  </script>
</body>
</html>
